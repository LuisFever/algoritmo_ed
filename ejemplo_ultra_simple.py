"""
EJEMPLO ULTRA SIMPLE Y VISUAL - Evoluci√≥n Diferencial
======================================================

Este ejemplo muestra PASO A PASO qu√© hace el algoritmo.
Perfecto para entender exactamente c√≥mo funciona.

PROBLEMA: Encontrar el valor de 'x' que hace x¬≤ lo m√°s peque√±o posible
RESPUESTA ESPERADA: x = 0 (porque 0¬≤ = 0)
"""

import random

# ============================================================
# CONFIGURACI√ìN (puedes cambiar estos valores)
# ============================================================
poblacion_tamano = 5       # Solo 5 individuos para que sea f√°cil de seguir
F = 0.8                    # Factor de mutaci√≥n (0.5-1.0 recomendado)
CR = 0.7                   # Probabilidad de cruce (0.5-0.9 recomendado)
generaciones = 20          # Solo 20 iteraciones

# Visualizaci√≥n detallada
MOSTRAR_DETALLE = True     # True = muestra paso a paso las primeras 2 generaciones
                           # False = solo muestra resumen cada 5 generaciones

# ============================================================
# FUNCI√ìN A MINIMIZAR
# ============================================================
def funcion(x):
    """Queremos minimizar x¬≤"""
    return x * x

# ============================================================
# PASO 1: CREAR POBLACI√ìN INICIAL (n√∫meros aleatorios)
# ============================================================
poblacion = []
for i in range(poblacion_tamano):
    x = random.uniform(-10, 10)  # N√∫mero aleatorio entre -10 y 10
    poblacion.append(x)

print()
print("‚ïî" + "="*68 + "‚ïó")
print("‚ïë" + " "*15 + "ALGORITMO DE EVOLUCI√ìN DIFERENCIAL" + " "*19 + "‚ïë")
print("‚ïë" + " "*22 + "Ejemplo Ultra Simple" + " "*26 + "‚ïë")
print("‚ïö" + "="*68 + "‚ïù")
print()
print("üìã CONFIGURACI√ìN:")
print(f"   ‚Ä¢ Poblaci√≥n: {poblacion_tamano} individuos")
print(f"   ‚Ä¢ Factor F: {F} (controla tama√±o de cambios)")
print(f"   ‚Ä¢ Probabilidad CR: {CR} (controla frecuencia de cambios)")
print(f"   ‚Ä¢ Generaciones: {generaciones}")
print(f"   ‚Ä¢ Objetivo: Minimizar f(x) = x¬≤")
print()

print("="*70)
print("POBLACI√ìN INICIAL (valores aleatorios):")
print("="*70)
mejor_inicial = min(poblacion, key=funcion)
for i, individuo in enumerate(poblacion):
    marca = "üëë" if individuo == mejor_inicial else "  "
    print(f"{marca} Individuo {i+1}: x = {individuo:7.3f}  ‚Üí  f(x) = {funcion(individuo):8.3f}")
print()
print(f"üéØ Mejor inicial: x = {mejor_inicial:7.3f}, f(x) = {funcion(mejor_inicial):8.3f}")
print()

# ============================================================
# PASO 2: EVOLUCIONAR (mejorar la poblaci√≥n)
# ============================================================
mejoras_totales = 0

for gen in range(generaciones):
    
    # Mostrar header de generaci√≥n si estamos en modo detalle
    if MOSTRAR_DETALLE and gen < 2:
        print("="*70)
        print(f"GENERACI√ìN {gen+1} - Detalle paso a paso")
        print("="*70)
    
    # Para cada individuo
    for i in range(poblacion_tamano):
        
        # MUTACI√ìN: Seleccionar 3 individuos aleatorios diferentes
        indices = [0, 1, 2, 3, 4]
        indices.remove(i)  # No puedo seleccionarme a m√≠ mismo
        r1, r2, r3 = random.sample(indices, 3)
        
        # Mostrar detalle de mutaci√≥n
        if MOSTRAR_DETALLE and gen < 2:
            print()
            print(f"‚îå‚îÄ Mejorando Individuo {i+1}: x = {poblacion[i]:6.3f}, f(x) = {funcion(poblacion[i]):7.3f}")
            print(f"‚îÇ")
            print(f"‚îÇ  üîÄ MUTACI√ìN: Seleccionados ‚Üí Ind {r1+1}, Ind {r2+1}, Ind {r3+1}")
            print(f"‚îÇ     x_r1 = {poblacion[r1]:6.3f}")
            print(f"‚îÇ     x_r2 = {poblacion[r2]:6.3f}")
            print(f"‚îÇ     x_r3 = {poblacion[r3]:6.3f}")
        
        # Crear individuo mutante: v = x_r1 + F * (x_r2 - x_r3)
        diferencia = poblacion[r2] - poblacion[r3]
        mutante = poblacion[r1] + F * diferencia
        
        if MOSTRAR_DETALLE and gen < 2:
            print(f"‚îÇ")
            print(f"‚îÇ     Diferencia = x_r2 - x_r3 = {diferencia:6.3f}")
            print(f"‚îÇ     Mutante = {poblacion[r1]:6.3f} + {F} √ó {diferencia:6.3f} = {mutante:6.3f}")
        
        # Mantener dentro de l√≠mites [-10, 10]
        mutante_original = mutante
        if mutante < -10:
            mutante = -10
        if mutante > 10:
            mutante = 10
        
        if MOSTRAR_DETALLE and gen < 2 and mutante != mutante_original:
            print(f"‚îÇ     ‚ö†Ô∏è  Ajustado a l√≠mites: {mutante:6.3f}")
        
        # CRUCE: ¬øUso el mutante o mantengo el original?
        rand_cruce = random.random()
        if rand_cruce < CR:
            hijo = mutante
            decision_cruce = f"S√ç (rand={rand_cruce:.2f} < CR={CR})"
        else:
            hijo = poblacion[i]
            decision_cruce = f"NO (rand={rand_cruce:.2f} ‚â• CR={CR})"
        
        if MOSTRAR_DETALLE and gen < 2:
            print(f"‚îÇ")
            print(f"‚îÇ  ‚öîÔ∏è  CRUCE: ¬øUsar mutante? {decision_cruce}")
            print(f"‚îÇ     Hijo = {hijo:6.3f}")
        
        # SELECCI√ìN: Quedarme con el mejor
        fitness_padre = funcion(poblacion[i])
        fitness_hijo = funcion(hijo)
        
        if fitness_hijo < fitness_padre:
            if MOSTRAR_DETALLE and gen < 2:
                print(f"‚îÇ")
                print(f"‚îÇ  ‚úÖ SELECCI√ìN: Hijo es MEJOR")
                print(f"‚îÇ     Padre: f({poblacion[i]:6.3f}) = {fitness_padre:7.3f}")
                print(f"‚îÇ     Hijo:  f({hijo:6.3f}) = {fitness_hijo:7.3f}")
                print(f"‚îÇ     ‚Üí Reemplazamos con el hijo")
            poblacion[i] = hijo  # ¬°Mejora! Lo guardo
            mejoras_totales += 1
            mejoro = "‚úì"
        else:
            if MOSTRAR_DETALLE and gen < 2:
                print(f"‚îÇ")
                print(f"‚îÇ  ‚ùå SELECCI√ìN: Padre es MEJOR")
                print(f"‚îÇ     Padre: f({poblacion[i]:6.3f}) = {fitness_padre:7.3f}")
                print(f"‚îÇ     Hijo:  f({hijo:6.3f}) = {fitness_hijo:7.3f}")
                print(f"‚îÇ     ‚Üí Mantenemos el padre")
            mejoro = "‚úó"
        
        if MOSTRAR_DETALLE and gen < 2:
            print(f"‚îî‚îÄ Resultado: Ind {i+1} = {poblacion[i]:6.3f}")
    
    # Mostrar progreso cada 5 generaciones (o siempre si es gen 0 o 1 en detalle)
    if (gen + 1) % 5 == 0 or (MOSTRAR_DETALLE and gen < 2):
        mejor = min(poblacion, key=funcion)
        if MOSTRAR_DETALLE and gen < 2:
            print()
            print("‚îÄ" * 70)
        print(f"üìä Generaci√≥n {gen+1:2d}: Mejor x = {mejor:7.4f}, f(x) = {funcion(mejor):8.6f}")
        if MOSTRAR_DETALLE and gen < 2:
            print()

# ============================================================
# PASO 3: MOSTRAR RESULTADO FINAL
# ============================================================
print()
print("="*70)
print("POBLACI√ìN FINAL:")
print("="*70)
for i, individuo in enumerate(poblacion):
    mejoria = "‚≠ê" if individuo == min(poblacion, key=funcion) else "  "
    print(f"{mejoria} Individuo {i+1}: x = {individuo:7.4f}  ‚Üí  f(x) = {funcion(individuo):8.6f}")

mejor_solucion = min(poblacion, key=funcion)
peor_solucion = max(poblacion, key=funcion)
promedio = sum(poblacion) / len(poblacion)

print()
print("="*70)
print("üéØ RESULTADOS FINALES:")
print("="*70)
print(f"‚úÖ Mejor x encontrado:  {mejor_solucion:8.6f}  ‚Üí  f(x) = {funcion(mejor_solucion):.8f}")
print(f"‚ùå Peor x en poblaci√≥n: {peor_solucion:8.6f}  ‚Üí  f(x) = {funcion(peor_solucion):.8f}")
print(f"üìä Promedio poblaci√≥n:  {promedio:8.6f}  ‚Üí  f(x) = {funcion(promedio):.8f}")
print()
print(f"üéØ √ìptimo te√≥rico:       0.000000  ‚Üí  f(x) = 0.00000000")
print(f"üìè Error absoluto:      {abs(mejor_solucion):.8f}")
print(f"üìà Mejoras realizadas:  {mejoras_totales} de {generaciones * poblacion_tamano} intentos ({mejoras_totales/(generaciones*poblacion_tamano)*100:.1f}%)")
print("="*70)

print()
print("üí° OBSERVACIONES:")
print("‚îÄ" * 70)
print("‚Ä¢ El algoritmo encontr√≥ una soluci√≥n muy cercana al √≥ptimo (x=0)")
print("‚Ä¢ Cada generaci√≥n mejor√≥ o mantuvo la calidad de la poblaci√≥n")
print("‚Ä¢ La mutaci√≥n diferencial us√≥ las diferencias entre individuos")
print("‚Ä¢ El cruce mantuvo diversidad en la poblaci√≥n")
print("‚Ä¢ La selecci√≥n garantiz√≥ que nunca empeor√°ramos")
print("="*70)

